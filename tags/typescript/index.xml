<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on CYH Blog</title><link>https://jack2012aa.github.io/CYH-blog/tags/typescript/</link><description>Recent content in TypeScript on CYH Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 07 Jul 2025 18:35:31 +0800</lastBuildDate><atom:link href="https://jack2012aa.github.io/CYH-blog/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>[SyntaxNext] How to Combine React and Traditional TypeScript</title><link>https://jack2012aa.github.io/CYH-blog/posts/syntaxnext/2-react/</link><pubDate>Mon, 07 Jul 2025 18:35:31 +0800</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/syntaxnext/2-react/</guid><description>&lt;h1 id="initial-design">Initial Design&lt;/h1>
&lt;p>At the beginning, we used a pure HTML, CSS, and TypeScript architecture. This was a logical decision, as less than 40% of the extension&amp;rsquo;s code is UI-related, and none of us were familiar with frontend frameworks. This approach also avoided the added complexity of state management libraries.&lt;/p>
&lt;p>In this design, the file running as the content script (which we called &lt;code>content&lt;/code>) imports other files to perform its tasks, including the UI component (which we called &lt;code>interviewTab&lt;/code>). &lt;code>interviewTab&lt;/code> exports functions that change the UI&amp;rsquo;s appearance, and the state is managed in &lt;code>content&lt;/code>. This worked well when the UI was simple and indeed shortened development time.&lt;/p></description></item></channel></rss>