<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on CYH Blog</title><link>https://jack2012aa.github.io/CYH-blog/posts/</link><description>Recent content in Posts on CYH Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 07 Jul 2025 18:35:39 +0800</lastBuildDate><atom:link href="https://jack2012aa.github.io/CYH-blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>[SyntaxNext] Real-Time Speech-to-Text: Development and Choices</title><link>https://jack2012aa.github.io/CYH-blog/posts/syntaxnext/3-stt/</link><pubDate>Mon, 07 Jul 2025 18:35:39 +0800</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/syntaxnext/3-stt/</guid><description>&lt;h1 id="apis">APIs&lt;/h1>
&lt;p>To be a vocal agent, SyntaxNext has to &amp;ldquo;listen&amp;rdquo; to what the user says. It requires a speech-to-text (STT) service. There are two types of speech-to-text: batch and real-time. Models like &lt;code>Whisper&lt;/code> support batch transcription. Users feed the model a file, and the model provides the transcript. Real-time STT receives a voice stream and returns/yields a transcript when a sentence or phrase is finished.&lt;/p>
&lt;p>Typically, batch transcription is more accurate than real-time transcription. But in a vocal agent situation, latency may be more important than accuracy, since the agent LLM can often infer the correct meaning from a slightly inaccurate transcript, and the precision is generally quite good.&lt;/p></description></item><item><title>[SyntaxNext] How to Combine React and Traditional TypeScript</title><link>https://jack2012aa.github.io/CYH-blog/posts/syntaxnext/2-react/</link><pubDate>Mon, 07 Jul 2025 18:35:31 +0800</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/syntaxnext/2-react/</guid><description>&lt;h1 id="initial-design">Initial Design&lt;/h1>
&lt;p>At the beginning, we used a pure HTML, CSS, and TypeScript architecture. This was a logical decision, as less than 40% of the extension&amp;rsquo;s code is UI-related, and none of us were familiar with frontend frameworks. This approach also avoided the added complexity of state management libraries.&lt;/p>
&lt;p>In this design, the file running as the content script (which we called &lt;code>content&lt;/code>) imports other files to perform its tasks, including the UI component (which we called &lt;code>interviewTab&lt;/code>). &lt;code>interviewTab&lt;/code> exports functions that change the UI&amp;rsquo;s appearance, and the state is managed in &lt;code>content&lt;/code>. This worked well when the UI was simple and indeed shortened development time.&lt;/p></description></item><item><title>[SyntaxNext] Project Introduction</title><link>https://jack2012aa.github.io/CYH-blog/posts/syntaxnext/1-intro/</link><pubDate>Mon, 07 Jul 2025 18:27:11 +0800</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/syntaxnext/1-intro/</guid><description>&lt;p>Hi everyone. This is a new series about what I learned while developing our side project, SyntaxNext.&lt;/p>
&lt;h1 id="what-syntaxnext-does">What SyntaxNext Does&lt;/h1>
&lt;p>SyntaxNext is an AI-powered mock interview agent. It works as a Chrome extension, and users can choose any LeetCode problem. During the interview, the extension shows the stages and tasks that an interviewee should complete. The agent will describe the question, and users should tell the agent how they plan to solve the problem. Users can go to the next step only when the agent thinks they have finished the required tasks in the current step.&lt;/p></description></item><item><title>[CS 5204 Operating Systems Project 2] XV6 File System Checker</title><link>https://jack2012aa.github.io/CYH-blog/posts/cs-5204/cs-5204-p2/</link><pubDate>Mon, 07 Jul 2025 18:03:01 +0800</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/cs-5204/cs-5204-p2/</guid><description>&lt;h3 id="linkhttpsgithubcomjack2012aacs5204-spring25-p2">&lt;a href="https://github.com/jack2012aa/CS5204-Spring25-P2">Link&lt;/a>&lt;/h3>
&lt;h2 id="what-it-does">What it does.&lt;/h2>
&lt;p>&lt;code>xcheck&lt;/code> is a file system checker designed for the xv6 operating system. It checks 11 types of consistency:&lt;/p>
&lt;ol>
&lt;li>Superblock consistency.&lt;/li>
&lt;li>Root directory existence.&lt;/li>
&lt;li>Inode type.&lt;/li>
&lt;li>Direct and indirect addresses validity.&lt;/li>
&lt;li>Direct and indirect addresses reference counts.&lt;/li>
&lt;li>Directory entries validity (existence of &amp;ldquo;.&amp;rdquo; and &amp;ldquo;..&amp;rdquo; entries).&lt;/li>
&lt;li>Data bitmap consistency.&lt;/li>
&lt;li>Files reference counts.&lt;/li>
&lt;li>In-use inodes reference in directory entries.&lt;/li>
&lt;li>Referred inode allocation state.&lt;/li>
&lt;li>Directory reference counts.&lt;/li>
&lt;/ol>
&lt;h2 id="how-it-works">How it works&lt;/h2>
&lt;h3 id="structure">Structure&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── fs.img &lt;span style="color:#75715e"># File system image for testing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Makefile &lt;span style="color:#75715e"># Makefile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── README.md &lt;span style="color:#75715e"># Readme&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── bitmap.c &lt;span style="color:#75715e"># A flexible size bitmap class used to read / build fs bitmap.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── bitmap.h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── check.c &lt;span style="color:#75715e"># The check function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── check.h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── test.c &lt;span style="color:#75715e"># A test for the check function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── xcheck.c &lt;span style="color:#75715e"># The main function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── xv6-riscv &lt;span style="color:#75715e"># xv6 source code&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bitmap">Bitmap&lt;/h3>
&lt;p>&lt;code>bitmap.h&lt;/code> defines a bitmap structure which is based on an array of unsigned integer. &lt;code>bitmap_init&lt;/code> takes an variable size and allocate memory for the array, and &lt;code>bitmap_set&lt;/code> tests and sets a specific bit in the bitmap.&lt;/p></description></item><item><title>[CS 5204 Operating Systems Project 1] Multi-thread Web Server</title><link>https://jack2012aa.github.io/CYH-blog/posts/cs-5204/cs-5204-p1/</link><pubDate>Mon, 07 Jul 2025 17:13:38 +0800</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/cs-5204/cs-5204-p1/</guid><description>&lt;h3 id="linkhttpsgithubcomjack2012aacs5204-spring25-p1">&lt;a href="https://github.com/jack2012aa/CS5204-Spring25-P1">Link&lt;/a>&lt;/h3>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>I implemented a simple Web server in this project. It listens to specific port for http requests. To increase throughput, it has to be multi-thread and obey Smallest File Scheduling as well as having some mechanism to avoid starvation.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;h3 id="multithreading">Multithreading&lt;/h3>
&lt;p>Using &lt;code>pthread&lt;/code> is the simplest way to accomplish multithreading in C. The logic of Web server is extremely match with the producer-consumer architecture. Hence, I used the main thread as the producer, which polls request from the port file descriptor. The new task is appended to a queue and the thread goes back to polling. Idle consumers try to get a task from the queue.&lt;/p></description></item><item><title>[CS 5040 Data structures and algorithms Project 4] MemManager</title><link>https://jack2012aa.github.io/CYH-blog/posts/cs-5040/cs-5040-p4/</link><pubDate>Sat, 07 Dec 2024 17:19:48 -0500</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/cs-5040/cs-5040-p4/</guid><description>&lt;h3 id="linkhttpsgithubcomjack2012aacs-5040-dsatreemainf24p4memmanager_hashtable">&lt;a href="https://github.com/jack2012aa/CS-5040-DSA/tree/main/F24P4MemManager_HashTable">Link&lt;/a>&lt;/h3>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>In this project, I write a memory manager that use the first-fit strategy to manage a memory pool. Other class can require memory from it and it will provide a handle for each request.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>Implement the first-fit strategy is easy: write a &lt;code>DoublyLinkedList&lt;/code> class (my &lt;code>FreeBlockManager&lt;/code>) storing free memory blocks. When handling an allocate request, the &lt;code>MemoryManager&lt;/code> find a space that is large enough from the linked-list, or extend if necessary, and cut the space based on the required size, then return the &lt;code>Handle&lt;/code> representing the memory position. Later on, other class can use the &lt;code>Handle&lt;/code> to get the content in the memory.&lt;/p></description></item><item><title>[CS 5040 Data structures and algorithms Project 3] ExternalSorting</title><link>https://jack2012aa.github.io/CYH-blog/posts/cs-5040/cs-5040-p3/</link><pubDate>Sat, 07 Dec 2024 17:18:58 -0500</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/cs-5040/cs-5040-p3/</guid><description>&lt;h3 id="linkhttpsgithubcomjack2012aacs-5040-dsatreemainf24p3externalsorting">&lt;a href="https://github.com/jack2012aa/CS-5040-DSA/tree/main/F24P3ExternalSorting">Link&lt;/a>&lt;/h3>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>In this project, I wrote an external sorting algorithm. It takes a file containing {int value, float key} data, sorts them and put sorted data back to the file.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>In external sorting, decreasing number of read from the file system extremely increases the performance. Hence, I use the replacement selection algorithm and multi-way merging in this project.&lt;/p>
&lt;h3 id="replacement-selection">Replacement selection&lt;/h3>
&lt;p>In replacement selection, we try to sort the input into k sorted runs.&lt;/p></description></item><item><title>[CS 5040 Data structures and algorithms Project 2] SemSearch</title><link>https://jack2012aa.github.io/CYH-blog/posts/cs-5040/cs-5040-p2/</link><pubDate>Sat, 07 Dec 2024 17:17:57 -0500</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/cs-5040/cs-5040-p2/</guid><description>&lt;h3 id="linkhttpsgithubcomjack2012aacs-5040-dsatreemainf24p2semsearch">&lt;a href="https://github.com/jack2012aa/CS-5040-DSA/tree/main/F24P2SemSearch">Link&lt;/a>&lt;/h3>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>In this project, I wrote a simple database storing seminars information. User can insert/delete seminars and search by field and range, and print the structure of the database.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>Since the database must support search by range, I used a binary search tree to store &lt;code>Seminar&lt;/code> with a field as the key. To search by location, I also implemented a &lt;code>BinTree&lt;/code> class. After finishing these, the project is easy.&lt;/p></description></item><item><title>[CS 5040 Data structures and algorithms Project 1] SongDB</title><link>https://jack2012aa.github.io/CYH-blog/posts/cs-5040/cs-5040-p1/</link><pubDate>Sat, 07 Dec 2024 17:15:49 -0500</pubDate><guid>https://jack2012aa.github.io/CYH-blog/posts/cs-5040/cs-5040-p1/</guid><description>&lt;h3 id="linkhttpsgithubcomjack2012aacs-5040-dsatreemainf24p1songsdb_hashtable_adjlist_starter">&lt;a href="https://github.com/jack2012aa/CS-5040-DSA/tree/main/F24P1SongsDB_HashTable_AdjList_Starter">Link&lt;/a>&lt;/h3>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>In this project, I wrote a simple database storing artists and songs data. User can insert/remove artists and songs, and print artists and songs in the database as well as the structure of the database. By requirement, the database should only save artist&amp;rsquo;s name, song&amp;rsquo;s name, and a connection between artists and songs. Duplicate artists and songs are not allowed.&lt;/p>
&lt;p>While insert {artist-name}&lt;!-- raw HTML omitted -->{song-name}, if the artist name and song-name exist in the database, then the database won&amp;rsquo;t create a new record, it creates a connection between the exist artist and song.&lt;/p></description></item></channel></rss>